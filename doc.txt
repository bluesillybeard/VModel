VMF files are literally just a series of tags.

Any path referenced by a vmf file is relative to the folder that contains the file.

For example, if a file path is "vmf/test.vmf", then any path it references will be appended to "vmf/".
So, if test.vmf has the texture path of "../texture/test.png" then the real path is "vmf/../texture/test.png", or "texture/test.png"

here is an example (GrassCube.vmf):
"""
type: entity
mesh: ../mesh/GrassCube.vmesh
texture: ../texture/GrassCube.png
"""

Here is another example - this one has the model details in the same folder as the vmf file:
"""
type:entity
mesh: mesh.vmesh
texture: texture.png
"""


Here is an example for a block model:
"""
type: block
mesh: ../mesh/StoneBlock.vbmesh
blocks: 31
texture: ../texture/StoneBlock.png
"""

vmesh and vbmesh files are pretty simple.

NOTE: Everything is little endian.


A vmesh vertex attributes, are simply a list of numbers that define the vertex attributes.
The attributes aren't explicitly given a purpose in the mesh file, in fact the actual use of the attributes aren't really defined until a shader renders the mesh.
But, there are some patterns that all vmesh files will probably follow:
-The first attribue should always be the vertex's position, either 3D or 2D.
-If the second attribute is 1D it's probably a brightness, 2D it's probably texture coordinates, 3D it's probably an RGB color, 4D it's probably an RGBA color.
-if the third attribue is the same number of dimentions as the first, then it's probably a normal vector.
-If the attributes are 3, 2, 3, they are extremely likely to be 3D pos, texture coordinates, 3D normal vector.

But again, keep in mind that the attributes can technically represent literally anything.
vmesh could even be used with a single 1D attribute and act as a sound sample, or have one 3D attribute to act as a weird texture.

vmesh file structure:
4 bytes    : uint with the number of vertices. Variable "V"
4 bytes    : uint with the number of triangles. Variable "I"
4 bytes    : uint with the number of attributes. Variable "A". Can be any value greater than 1.
A*4 bytes    : attributes array. Each attribute can be 1(scalar), 2(2D vector), 3(3D vector), or 4 (4D vector). Variable "T" for the sum of all values in this list.
V*T*4 bytes:|the vertex data.
I*4*3 bytes: the indices, in unsigned 32 bit ints.

vbmesh:
NOTE:The format starts off as an entire vmesh containing the basic mesh. In fact, a vbmesh can be read as a vmesh without any issues.
I bytes: the removable triangles. One byte for each triangle in the mesh.

Each removable triangle is a byte that contains which faces have to be blocked in order for that triangle to be culled.
Every face set as a 1 for a triangle has to be blocked in order for it to be culled; most triangles only have one face set.
It is worth noting that if every face is blocked, the entire block will be culled skipping any mesh data it contains altogether.

The faces are organized like so:
bit 1 :top (+y)
bit 2 :bottom(-y)
bit 4 :side (-z OR +z; -z if the formula ((x + z) & 1) - 0.5f evaluates to -1)
The formula "(z + x & 1) * -2 + 1 + z" can be used to get the Z position of the block that touches the z side of a block.
bit 8 :side (-x)
bit 16:side (+x)
bits 32, 64, and 128 are unused and ignored. Theoretically, they could be used to hide a secret message...

The blocked faces of a block model (the faces that the block will block from being seen on other blocks) are stored within the VMF file, not the vbmesh.
This is because both the mesh and the texture can be modified to where it won't be blocked;
both a model that allows it to be viewed through and transparent texture can reveal something that would otherwise be blocked.

For example files, you can just look at Voxelesque's resource folder and use either a text editor or a hex editor to look at the files directly.

CHUNK POSITIONING - completely unrelated sorry.
the Y and Z scales are 0.5, while the X scale is 0.28867513459481288225